import heapq
goal_state = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3
def heuristic(state):
    h = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                continue
            x, y = divmod(state[i][j] - 1, 3)
            h += abs(x - i) + abs(y - j)
    return h
def solve_puzzle(initial_state):
    open_list = []
    heapq.heappush(open_list, (heuristic(initial_state), 0, initial_state))
    visited = set()
    while open_list:
        _, cost, current_state = heapq.heappop(open_list)
        if current_state == goal_state:
            return cost
        if current_state in visited:
            continue
        visited.add(tuple(map(tuple, current_state)))
        for dx, dy in moves:
            x, y = 0, 0
            for i in range(3):
                for j in range(3):
                    if current_state[i][j] == 0:
                        x, y = i, j
                        break
            new_x, new_y = x + dx, y + dy
            if is_valid(new_x, new_y):
                new_state = [list(row) for row in current_state]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                heapq.heappush(open_list, (cost + 1 + heuristic(new_state), cost + 1, new_state))
    return -1  
initial_state = [[2, 8, 3], [1, 6, 4], [7, 0, 5]]
steps = solve_puzzle(initial_state)
if steps != -1:
    print(f"Solution found in {steps} steps.")
else:
    print("No solution found.")
